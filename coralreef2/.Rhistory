parameterTotal$parametersVal$proba_grazing_AMA #  TO INCLUDE ; double ; best value = 0.3 for site 2, not best value for the other two sites, values tested are [0.3, 0.5]
parameterTotal$parametersVal$proba_grazing_CCA # TO INCLUDE ; double ; no best value for any site, values tested are [0.05, 0.1, 0.2, 0.3, 1.0]
parameterTotal$parametersVal$proba_grazing_Halimeda #  TO INCLUDE with site 2 and 3 BUT NOT WITH SITE 1 because halimeda is not present in site 1; double ; best value = 0.3 for site 3 and 0.5 for site 2, values tested are [0.3, 0.5, 1.0]
parameterTotal$parametersVal$proba_grazing_MA # TO INCLUDE ; double ; best value = 0.7 for all three sites, values tested are [0.3, 0.5, 0.7]
parameterTotal$parametersVal$ratioAreaBranchingPlating_OvertopColonies # TO INCLUDE ; double ; best value is 2 for all 3 sites ; values tested are [1.5, 2, 3]
### other potential parameters to vary:
Constants.height_BigAlgae # value = 30 (cm) TO INCLUDE?
Constants.height_Turf # = 10 cm TO INCLUDE?
Constants.height_CCA_EncrustingCoral # = 2 cm NO because there is no much pont changing that.
Constants.proba_settle_CCA # = 0.5 NO because mix effect with otherProportions
Constants.proba_settle_Barren_ground # = 0.5 NO because mix effect with otherProportions
Constants.proba_settle_Dead_coral # = 0.5 NO because mix effect with otherProportions
ranges <- list()
ranges$FB <- list()
ranges$PB <- list()
ranges$IR <- list()
### Parameters considered in the calibration
ranges$FB$Bleaching_diff_response <- c(2.5,3.5)
ranges$PB$Bleaching_diff_response <- c(2.5,3.5)
ranges$IR$Bleaching_diff_response <- c(2.5,3.5)
ranges$FB$GR_reduction_interaction <- c(6,10) # calibrated value = 8; sampling value < 1 does not make sense --> increase growth rate
ranges$PB$GR_reduction_interaction <- c(1,5)  # calibrated value = 2
ranges$IR$GR_reduction_interaction <- c(6,10) # calibrated value = 8
ranges$FB$otherProportions <- c(0.00001,0.001)
ranges$PB$otherProportions <- c(0.00001,0.001)
ranges$IR$otherProportions <- c(0.00001,0.001)
ranges$FB$proba_grazing_MA <- c(0.5,0.9) # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_MA <- c(0.5,0.9)
ranges$IR$proba_grazing_MA <- c(0.5,0.9)
ranges$FB$proba_grazing_ACA <- c(0.5,0.9)  # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_ACA <- c(0.5,0.9)
ranges$IR$proba_grazing_ACA <- c(0.5,0.9)
ranges$FB$proba_grazing_Halimeda <- NA # Halimeda spp. are not present in FB
ranges$PB$proba_grazing_Halimeda <- c(0.2,0.7) # value calibrated  = 0.5
ranges$IR$proba_grazing_Halimeda <- c(0.1,0.5) # value calibrated  = 0.3
ranges$FB$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$PB$proba_grazing_AMA <- c(0.1,0.5) # value calibrated = 0.3
ranges$IR$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$FB$proba_grazing_CCA <- c(0.01,0.1) # no value calibrated because CCA is always overcompeted against algae, so smaller value is better
ranges$PB$proba_grazing_CCA <- c(0.01,0.1)
ranges$IR$proba_grazing_CCA <- c(0.01,0.1)
ranges$FB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # value calibrated for all three sites = 2
ranges$PB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # I chose 1.1 and not 1.0 because 1.0 is not realistic: the overtopping colony need to be bigger than the overtopped one
ranges$IR$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) #
ranges$FB$proba_Algae_coverCCA <- c(0,0.05)
ranges$PB$proba_Algae_coverCCA <- c(0,0.05)
ranges$IR$proba_Algae_coverCCA <- c(0,0.05)
### Note: The following parameters are not included in the GSA because there correspond to the intensity of factors
# numberCycloneDMTmodel
# numberGrazingModel
# Connectivity
# disturbance_scenario_number
### Additional parameters (not included in the calibration)
ranges$FB$height_BigAlgae <- c(20,50)  # Sargassum sp. can grow pretty high. There were not present in quantity in any of the site though.
ranges$PB$height_BigAlgae <- c(20,50) # defailt value: 30cm
ranges$IR$height_BigAlgae <- c(20,50)
ranges$FB$height_Turf <- c(5,15) # I think this range makes the most sense
ranges$PB$height_Turf <- c(5,15) # default vakue: 10cm
ranges$IR$height_Turf <- c(5,15)
ranges$FB$height_CCA_EncrustingCoral <- c(0.5,4) # I think this range makes the most sense
ranges$PB$height_CCA_EncrustingCoral <- c(0.5,4) # default value: 2cm
ranges$IR$height_CCA_EncrustingCoral <- c(0.5,4)
ranges$FB$proba_settle_CCA <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_CCA <- c(0.2,0.8)
ranges$IR$proba_settle_CCA <- c(0.2,0.8)
ranges$FB$proba_settle_Barren_ground <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$IR$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$FB$proba_settle_Dead_coral <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Dead_coral <- c(0.2,0.8)
ranges$IR$proba_settle_Dead_coral <- c(0.2,0.8)
length(ranges$FB) # 16
###
m.time <- (10 + 0.5)*4*2+2
m.time <- (10 + 0.5)*4*2+2
m.ds <- "Percentage_cover"
my.model <- Model(modeldir = modeldir, maxtime = m.time, dataset = "Percentage_cover", load = T)
parameters <- GetSimulationParameters(my.model)
# define the parameters to fix
reefSize <- 100
site <- 1
sites <- c("FB","PB","IR")
computerName <- "Bruno"
wd <- "~/Dropbox/PhD Bruno/Modeling/"
wd_sensitivity_parametrization <- paste(wd,"Sensitivity analysis Parametrization/",sep="")
wd_sensitivity_paramet_Rscripts <- paste(wd_sensitivity_parametrization,"Rscripts/",sep="")
wd_experimental_design <- paste(wd_sensitivity_parametrization,"Simulations_output_common/Experimental_design/",sep="")
wd_output <- "/Users/carturan/Documents/My_Research/Modeling/Validation_parameterization_SA_coralreef2" # where the datasets of all the simulations have been saved
### Install rrepast from Github:
# library(devtools) # to call install_github() --> install the last version of rrepast from GitHub
# install_github("antonio-pgarcia/rrepast")
detach("package:rJava", unload=TRUE)
detach("package:rrepast", unload=TRUE)
options(java.parameters="-server -d64 -Xms=4096m -Xmx10240m")
# install.packages("rrepast")
library(rJava)
library(rrepast)
library(lhs)
# options(java.parameters="-server -Xms=512m -Xmx1024m")
source(paste(wd_sensitivity_paramet_Rscripts,"Optimizer_parameterization_coralreef2_functions.R",sep=""))
###
modeldir <- "/Users/carturan/Desktop/coralreef2"
### function
# m.dir <- modeldir
# m.ds <- "Percentage_cover"
# m.time <- simulations$maxTicks
# exp.design <- experimental.design
# NbReplicates <- summarySim$number_replicates
# numberCores <- 4
# coreNumber <- 1
# memoryAllocation <- "-server -Xms512m -Xmx4096m"
Run.experimentDesign.Bruno <- function(m.dir,m.ds,m.time,exp.design,NbReplicates,numberCores=1:8,coreNumber=1:8,memoryAllocation = "-server -Xms512m -Xmx4096m"){
numberSimulationToDo <- length(exp.design$communityNumber) # this is the total number of simulations to do reach at each step (i.e., 3 steps) all cores considered
### divide the exp.design according to the number of cores and the core number of the script; PLUS: alternate the dostribution of runs between cores every run (so that the cores finish approximatly at the same time)
listRunsCores <- list()
count <- 0
for(i in 1:numberCores){
listRunsCores[[i]] <- c(i)
names(listRunsCores)[i] <- paste("runCore_",i,sep="")
count <- i
}
positionList <- 0
while(count < numberSimulationToDo){
count <- count + 1
positionList <- positionList + 1
listRunsCores[[positionList]] <-  c(listRunsCores[[positionList]],count)
if(positionList == numberCores){
positionList <- 0
}
}
exp.design_thisCore <- exp.design[listRunsCores[[coreNumber]],]
m.time_thisCore <- m.time[listRunsCores[[coreNumber]]]
NbReplicates_thisCore <- NbReplicates[listRunsCores[[coreNumber]]]
my.model <- Model(modeldir = m.dir, maxtime = m.time[1], dataset = m.ds, load = TRUE) # m.time[1] --> all the runs have the same length
jvm.set_parameters(memoryAllocation)
exp.design_thisCore$System.out.print_data <- "true" # TO REMOVE
for (i in 1:length(exp.design_thisCore$yearDivision)){
d <- exp.design_thisCore[i, ]
# d$randomSeed <- sample(1:99999999)
SetSimulationParameters(my.model,d)
PB.pset(i)
Run.Bruno(my.model, NbReplicates_thisCore[i])  # a random seed is generated for each replicate (see Run())
}
}
### Definition of the parameters to vary
parameterTotal <- parameterValues.fun()
parameterTotal$parametersVal$Bleaching_diff_response # TO INCLUDE ; double ; best value = 3 for all 3 sites, values tested are [2,3,4] ; NOTE: 0 cannot be tested because the value corresponds to a denominator
parameterTotal$parametersVal$GR_reduction_interaction # TO INCLUDE ; interger (double in the model but only integer values can be given) ; value = 8 for site 1 and 3, = 2 for site 2
parameterTotal$parametersVal$numberCycloneDMTmodel   # do not include as DMT is kept constant over the years. The hydrodynamics disturbance model comes form the literature and was validated from filed data.
parameterTotal$parametersVal$numberGrazingModel # do not include grazing is kept constant over the years. The grazing corresponds simply to different intensity of the grazing pressure used during the model calibration.
parameterTotal$parametersVal$otherProportions # TO INCLUDE ; doube ; central value = 0.0001 ;
parameterTotal$parametersVal$proba_Algae_coverCCA # TO INCLUDE ; no central value but value tested are [0.1,0.25,0.5,0.75], with none of them doing better because CCA was always being overcompeted by other algae
parameterTotal$parametersVal$proba_grazing_ACA #  TO INCLUDE ; double ; best value = 0.7 for all three sites, values tested are [0.5, 0.7, 1.0]
parameterTotal$parametersVal$proba_grazing_AMA #  TO INCLUDE ; double ; best value = 0.3 for site 2, not best value for the other two sites, values tested are [0.3, 0.5]
parameterTotal$parametersVal$proba_grazing_CCA # TO INCLUDE ; double ; no best value for any site, values tested are [0.05, 0.1, 0.2, 0.3, 1.0]
parameterTotal$parametersVal$proba_grazing_Halimeda #  TO INCLUDE with site 2 and 3 BUT NOT WITH SITE 1 because halimeda is not present in site 1; double ; best value = 0.3 for site 3 and 0.5 for site 2, values tested are [0.3, 0.5, 1.0]
parameterTotal$parametersVal$proba_grazing_MA # TO INCLUDE ; double ; best value = 0.7 for all three sites, values tested are [0.3, 0.5, 0.7]
parameterTotal$parametersVal$ratioAreaBranchingPlating_OvertopColonies # TO INCLUDE ; double ; best value is 2 for all 3 sites ; values tested are [1.5, 2, 3]
### other potential parameters to vary:
Constants.height_BigAlgae # value = 30 (cm) TO INCLUDE?
Constants.height_Turf # = 10 cm TO INCLUDE?
Constants.height_CCA_EncrustingCoral # = 2 cm NO because there is no much pont changing that.
Constants.proba_settle_CCA # = 0.5 NO because mix effect with otherProportions
Constants.proba_settle_Barren_ground # = 0.5 NO because mix effect with otherProportions
Constants.proba_settle_Dead_coral # = 0.5 NO because mix effect with otherProportions
ranges <- list()
ranges$FB <- list()
ranges$PB <- list()
ranges$IR <- list()
### Parameters considered in the calibration
ranges$FB$Bleaching_diff_response <- c(2.5,3.5)
ranges$PB$Bleaching_diff_response <- c(2.5,3.5)
ranges$IR$Bleaching_diff_response <- c(2.5,3.5)
ranges$FB$GR_reduction_interaction <- c(6,10) # calibrated value = 8; sampling value < 1 does not make sense --> increase growth rate
ranges$PB$GR_reduction_interaction <- c(1,5)  # calibrated value = 2
ranges$IR$GR_reduction_interaction <- c(6,10) # calibrated value = 8
ranges$FB$otherProportions <- c(0.00001,0.001)
ranges$PB$otherProportions <- c(0.00001,0.001)
ranges$IR$otherProportions <- c(0.00001,0.001)
ranges$FB$proba_grazing_MA <- c(0.5,0.9) # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_MA <- c(0.5,0.9)
ranges$IR$proba_grazing_MA <- c(0.5,0.9)
ranges$FB$proba_grazing_ACA <- c(0.5,0.9)  # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_ACA <- c(0.5,0.9)
ranges$IR$proba_grazing_ACA <- c(0.5,0.9)
ranges$FB$proba_grazing_Halimeda <- NA # Halimeda spp. are not present in FB
ranges$PB$proba_grazing_Halimeda <- c(0.2,0.7) # value calibrated  = 0.5
ranges$IR$proba_grazing_Halimeda <- c(0.1,0.5) # value calibrated  = 0.3
ranges$FB$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$PB$proba_grazing_AMA <- c(0.1,0.5) # value calibrated = 0.3
ranges$IR$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$FB$proba_grazing_CCA <- c(0.01,0.1) # no value calibrated because CCA is always overcompeted against algae, so smaller value is better
ranges$PB$proba_grazing_CCA <- c(0.01,0.1)
ranges$IR$proba_grazing_CCA <- c(0.01,0.1)
ranges$FB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # value calibrated for all three sites = 2
ranges$PB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # I chose 1.1 and not 1.0 because 1.0 is not realistic: the overtopping colony need to be bigger than the overtopped one
ranges$IR$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) #
ranges$FB$proba_Algae_coverCCA <- c(0,0.05)
ranges$PB$proba_Algae_coverCCA <- c(0,0.05)
ranges$IR$proba_Algae_coverCCA <- c(0,0.05)
### Note: The following parameters are not included in the GSA because there correspond to the intensity of factors
# numberCycloneDMTmodel
# numberGrazingModel
# Connectivity
# disturbance_scenario_number
### Additional parameters (not included in the calibration)
ranges$FB$height_BigAlgae <- c(20,50)  # Sargassum sp. can grow pretty high. There were not present in quantity in any of the site though.
ranges$PB$height_BigAlgae <- c(20,50) # defailt value: 30cm
ranges$IR$height_BigAlgae <- c(20,50)
ranges$FB$height_Turf <- c(5,15) # I think this range makes the most sense
ranges$PB$height_Turf <- c(5,15) # default vakue: 10cm
ranges$IR$height_Turf <- c(5,15)
ranges$FB$height_CCA_EncrustingCoral <- c(0.5,4) # I think this range makes the most sense
ranges$PB$height_CCA_EncrustingCoral <- c(0.5,4) # default value: 2cm
ranges$IR$height_CCA_EncrustingCoral <- c(0.5,4)
ranges$FB$proba_settle_CCA <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_CCA <- c(0.2,0.8)
ranges$IR$proba_settle_CCA <- c(0.2,0.8)
ranges$FB$proba_settle_Barren_ground <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$IR$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$FB$proba_settle_Dead_coral <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Dead_coral <- c(0.2,0.8)
ranges$IR$proba_settle_Dead_coral <- c(0.2,0.8)
length(ranges$FB) # 16
###
m.time <- (10 + 0.5)*4*2+2
m.time <- (10 + 0.5)*4*2+2
m.ds <- "Percentage_cover"
my.model <- Model(modeldir = modeldir, maxtime = m.time, dataset = "Percentage_cover", load = T)
parameters <- GetSimulationParameters(my.model)
# define the parameters to fix
reefSize <- 100
site <- 1
sites <- c("FB","PB","IR")
computerName <- "Bruno"
core <- 2
parameters$communityNumber <- site
parameters$Cyclone_DMT.model <- 1 # the number does not matter here as 1, 2 and 3 produce the same DMT value
parameters$Grazing.model <- 1 # the number does not matter here as 1, 2, 3 and 4 produce the same % grazed value
parameters$reef_height <- reefSize
parameters$reef_width <- reefSize
parameters$yearDivision <- 2
parameters$Connectivity <- "low(20km)"
parameters$System.out.print_data <- F
parameters$randomSeed
parameters$disturbance_scenario_number <- 30
# parametersNamesToVary <- colnames(parameters)[!colnames(parameters) %in% c("Cyclone_DMT.model","Grazing.model","reef_height","reef_width","yearDivision","communityNumber","Connectivity","System.out.print_data","randomSeed","disturbance_scenario_number")]
# length(parametersNamesToVary) # 16
### write the experimental.design
nSamples <- 300
firstThird <- 1:floor(nSamples/3)
secondThird <- (tail(firstThird,1)+1):(2*tail(firstThird,1)+1)
thirdThird <- (tail(secondThird,1)+1):nSamples
# length(firstThird)
# length(secondThird)
# length(thirdThird)
runThisSession <- list()
runThisSession[[1]] <- firstThird
runThisSession[[2]] <- secondThird
runThisSession[[3]] <- thirdThird
fileName <- paste(wd_sensitivity_parametrization,"GSA LHC sampling/","GSA_sampling_",computerName,"_",reefSize,"_",reefSize,"_",1,"_",nSamples,".csv",sep="")
!file.exists(fileName)
if(!file.exists(fileName)){
### parameter range
rangesThisSite <- ranges[[sites[site]]]
if(sites[site] == "FB"){ # there is no Halimeda spp. in site 1 (FB)
rangesThisSite <- rangesThisSite[names(rangesThisSite) != "proba_grazing_Halimeda"]
}
## create hypercube
lh <- data.frame(randomLHS(n=nSamples, k=length(rangesThisSite)))
names(lh) <- names(rangesThisSite)
## convert parameters to required scale
for (i in 1:ncol(lh)) {
par <- names(lh)[i]
lh[,par] <- qunif(lh[,i], min=rangesThisSite[[par]][1], max=rangesThisSite[[par]][2]) ## continuous
}
### convert GR_reduction_interaction into a even integer  NOT NEEDED
# lh$GR_reduction_interaction <- ceiling(lh$GR_reduction_interaction) - ceiling(lh$GR_reduction_interaction)%%2
# table(lh$GR_reduction_interaction)
###
parametersToVary <- lh
experimental.design <- BuildParameterSet(parametersToVary,parameters)
experimental.design <- unfactor(experimental.design)
write.csv(experimental.design,fileName,row.names = F)
### write the runThisSession for all sessions
fileNames <- paste(wd_sensitivity_parametrization,"GSA LHC sampling/","GSA_sampling_",computerName,"_",c("firstThird","secondThird","thirdThird"),"_",reefSize,"_",reefSize,"_",1,".csv",sep="")
for(i in 1:length(fileNames)){
write.csv(experimental.design[runThisSession[[i]],],fileNames[i],row.names = F)
}
}else{
experimental.design <- read.csv(fileName,header = T, stringsAsFactors = F)
}
### to check the distributions to input
hist(experimental.design$Bleaching_diff_response)
hist(experimental.design$GR_reduction_interaction)
hist(experimental.design$otherProportions)
hist(experimental.design$proba_grazing_MA)
hist(experimental.design$proba_grazing_ACA)
hist(experimental.design$proba_grazing_Halimeda)
hist(experimental.design$proba_grazing_AMA)
hist(experimental.design$proba_grazing_CCA)
hist(experimental.design$ratioAreaBranchingPlating_OvertopColonies)
hist(experimental.design$proba_Algae_coverCCA)
hist(experimental.design$height_BigAlgae)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_Turf)
hist(experimental.design$height_CCA_EncrustingCoral)
hist(experimental.design$proba_settle_CCA)
hist(experimental.design$proba_settle_Barren_ground)
hist(experimental.design$proba_settle_Dead_coral)
### run experimental.design
m.dir <- modeldir
m.ds <- "Percentage_cover"
core
m.dir <- modeldir
m.ds <- "Percentage_cover"
exp.design <- experimental.design[runThisSession[[core]],]
NbReplicates <- rep(1,length(exp.design$proba_grazing_CCA))
m.time <-  rep(m.time,length(exp.design$proba_grazing_CCA))
numberCores <- 1
coreNumber <- 1
memoryAllocation <- "-server -Xms512m -Xmx5120m" # does not matter
Run.experimentDesign.Bruno(m.dir,m.ds,m.time,exp.design,NbReplicates,numberCores,coreNumber,memoryAllocation)
wd <- "~/Dropbox/PhD Bruno/Modeling/"
wd_sensitivity_parametrization <- paste(wd,"Sensitivity analysis Parametrization/",sep="")
wd_sensitivity_paramet_Rscripts <- paste(wd_sensitivity_parametrization,"Rscripts/",sep="")
wd_experimental_design <- paste(wd_sensitivity_parametrization,"Simulations_output_common/Experimental_design/",sep="")
wd_output <- "/Users/carturan/Documents/My_Research/Modeling/Validation_parameterization_SA_coralreef2" # where the datasets of all the simulations have been saved
library(dismo)
library(gbm)
source(paste(wd_sensitivity_paramet_Rscripts,"Optimizer_parameterization_coralreef2_functions.R",sep=""))
source(paste(wd_sensitivity_paramet_Rscripts,"GSA_LHC_sampling_boosted_regression_tree_Functions.R",sep=""))
date <- c("10_Feb_2019")
size <- 100
sites <- c("FB","PB","IR")
### Parameter
ranges <- list()
ranges$FB <- list()
ranges$PB <- list()
ranges$IR <- list()
### Parameters considered in the calibration
ranges$FB$Bleaching_diff_response <- c(2.5,3.5)
ranges$PB$Bleaching_diff_response <- c(2.5,3.5)
ranges$IR$Bleaching_diff_response <- c(2.5,3.5)
ranges$FB$GR_reduction_interaction <- c(6,10) # calibrated value = 8; sampling value < 1 does not make sense --> increase growth rate
ranges$PB$GR_reduction_interaction <- c(1,5)  # calibrated value = 2
ranges$IR$GR_reduction_interaction <- c(6,10) # calibrated value = 8
ranges$FB$otherProportions <- c(0.00001,0.001)
ranges$PB$otherProportions <- c(0.00001,0.001)
ranges$IR$otherProportions <- c(0.00001,0.001)
ranges$FB$proba_grazing_MA <- c(0.5,0.9) # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_MA <- c(0.5,0.9)
ranges$IR$proba_grazing_MA <- c(0.5,0.9)
ranges$FB$proba_grazing_ACA <- c(0.5,0.9)  # value calibrated for the three sites is 0.7
ranges$PB$proba_grazing_ACA <- c(0.5,0.9)
ranges$IR$proba_grazing_ACA <- c(0.5,0.9)
ranges$FB$proba_grazing_Halimeda <- NA # Halimeda spp. are not present in FB
ranges$PB$proba_grazing_Halimeda <- c(0.2,0.7) # value calibrated  = 0.5
ranges$IR$proba_grazing_Halimeda <- c(0.1,0.5) # value calibrated  = 0.3
ranges$FB$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$PB$proba_grazing_AMA <- c(0.1,0.5) # value calibrated = 0.3
ranges$IR$proba_grazing_AMA <- c(0.2,0.6) # both 0.3 and 0.5 are compatible with best fitted runs
ranges$FB$proba_grazing_CCA <- c(0.01,0.1) # no value calibrated because CCA is always overcompeted against algae, so smaller value is better
ranges$PB$proba_grazing_CCA <- c(0.01,0.1)
ranges$IR$proba_grazing_CCA <- c(0.01,0.1)
ranges$FB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # value calibrated for all three sites = 2
ranges$PB$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) # I chose 1.1 and not 1.0 because 1.0 is not realistic: the overtopping colony need to be bigger than the overtopped one
ranges$IR$ratioAreaBranchingPlating_OvertopColonies <- c(1.1,3) #
ranges$FB$proba_Algae_coverCCA <- c(0,0.05)
ranges$PB$proba_Algae_coverCCA <- c(0,0.05)
ranges$IR$proba_Algae_coverCCA <- c(0,0.05)
### Additional parameters (not included in the calibration)
ranges$FB$height_BigAlgae <- c(20,50)  # Sargassum sp. can grow pretty high. There were not present in quantity in any of the site though.
ranges$PB$height_BigAlgae <- c(20,50) # defailt value: 30cm
ranges$IR$height_BigAlgae <- c(20,50)
ranges$FB$height_Turf <- c(5,15) # I think this range makes the most sense
ranges$PB$height_Turf <- c(5,15) # default vakue: 10cm
ranges$IR$height_Turf <- c(5,15)
ranges$FB$height_CCA_EncrustingCoral <- c(0.5,4) # I think this range makes the most sense
ranges$PB$height_CCA_EncrustingCoral <- c(0.5,4) # default value: 2cm
ranges$IR$height_CCA_EncrustingCoral <- c(0.5,4)
ranges$FB$proba_settle_CCA <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_CCA <- c(0.2,0.8)
ranges$IR$proba_settle_CCA <- c(0.2,0.8)
ranges$FB$proba_settle_Barren_ground <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$IR$proba_settle_Barren_ground <- c(0.2,0.8)
ranges$FB$proba_settle_Dead_coral <- c(0.2,0.8) # default value: 0.5
ranges$PB$proba_settle_Dead_coral <- c(0.2,0.8)
ranges$IR$proba_settle_Dead_coral <- c(0.2,0.8)
ranges$FB
parametersGSA <- names(ranges$FB) # names of the parameters considered in the GSA
parameters <- GSA.retrieve.parameterValues.fun(date,sites,size,parametersGSA) # returns a list of dataframes for each sites with
date
sites
parameters <- GSA.retrieve.parameterValues.fun(date,sites[1],size,parametersGSA) # returns a list of dataframes for each sites with
nameFolders <- paste("GSA_",sites,"_",size,"_",size,"_",date,"/","output/Parameters_values/Parameters_values_simulations.csv",sep="")
nameFolders
nameFolders <- paste("GSA_",sites[1],"_",size,"_",size,"_",date,"/","output/Parameters_values/Parameters_values_simulations.csv",sep="")
nameFolders
parameters <- GSA.retrieve.parameterValues.fun(date,sites[1],size,parametersGSA) # returns a list of dataframes for each sites with
parameters
### BRT
siteHere <- sites[1]
if(siteHere == "FB"){
parameters <- parameters[,colnames(parameters) != "proba_grazing_Halimeda"]
}
colnames(parameters)
class(parameters)
parameters[[1]] <- parameters[[1]][,colnames(parameters[[1]]) != "proba_grazing_Halimeda"]
score <- GSA.retrieve.totalCoralCover.fun(date,siteHere,size,year=NULL)
date
size
randonSeed_UUID <- GSA.retrieve.randonSeed.UUID.fun(date,sites[1],size)
randonSeed_UUID <- GSA.retrieve.randonSeed.UUID.fun(date,sites,size)
site
site <- siteHere
nameFolders <- paste("GSA_",site,"_",size,"_",size,"_",date,"/","output/Parameters_values/Parameters_values_simulations.csv",sep="")
nameFiles <- paste(wd_output,nameFolders,sep="/")
output <- list()
for(i in 1:length(nameFiles)){
parametersHere <- read.csv(nameFiles[i],header = T, stringsAsFactors = F)
output[[i]] <- parametersHere[,c("randomSeed","UUID_here")]
}
### retreive random seeds and UUID number corresponding to site, date and size
# returns a list of dataframe for each site entered
GSA.retrieve.randonSeed.UUID.fun <- function(date,site,size){
nameFolders <- paste("GSA_",site,"_",size,"_",size,"_",date,"/","output/Parameters_values/Parameters_values_simulations.csv",sep="")
nameFiles <- paste(wd_output,nameFolders,sep="/")
output <- list()
for(i in 1:length(nameFiles)){
parametersHere <- read.csv(nameFiles[i],header = T, stringsAsFactors = F)
output[[i]] <- parametersHere[,c("randomSeed","UUID_here")]
}
names(output) <- site
return(output)
}
score <- GSA.retrieve.totalCoralCover.fun(date,siteHere,size,year=NULL)
score
hist(score)
hist(score$FB$coralCoverTotal)
data_FB <- merge(score$FB[,c("coralCoverTotal","UUID_here")],parameters$FB,by="UUID_here")
data_FB <- merge(score$FB[,c("coralCoverTotal","UUID_here")],parameters$FB,by="UUID_here")
predictors <- colnames(data_FB)[! colnames(data_FB) %in% c("UUID_here","coralCoverTotal","randomSeed")]
head(predictors)
parameters$F
data_FB
colnames(data_FB)
colnames(data_FB)[! colnames(data_FB) %in% c("UUID_here","coralCoverTotal","randomSeed")]
predictors <- colnames(data_FB)[! colnames(data_FB) %in% c("UUID_here","coralCoverTotal","randomSeed")]
predictors
response <- "coralCoverTotal"
brt.fit <- gbm.step(data_FB, gbm.x = predictors, gbm.y = response, family="gaussian", tolerance = 0.0001, learning.rate = 0.01, bag.fraction=0.75, tree.complexity = 2)
summary_BRT <- summary(brt.fit)
contributionPara <- data.frame(
parametersName = summary_BRT$var,
influence = summary_BRT$rel.inf,
stringsAsFactors = F
)
par(mar=c(4,18,0.5,0.5))
barplot(rev(contributionPara$influence),horiz = T,names.arg=rev(contributionPara$parametersName),las=1)
mtext("Influence (%)",side=1,line=2.5,cex=1)
par(mar=c(4,4,1,2))
gbm.plot(brt.fit)
par(mar=c(2,4,1,0.5))
gbm.plot.fits(brt.fit)
wd <- "~/Documents/My_Research/Modeling/coralreef2"
wd_Datasets_original <- paste(wd,"/datasets_original",sep="") # orginal dataset used with R to produce csv used by the model
wd_Datasets_R <- paste(wd,"/datasets_R",sep="")               # datasets and results obtained from work on original datasets in R, but not used for the Repast model
wd_Datasets_outputs <- paste(wd,"/datasets_outputs",sep="")
wd_Datasets_inputs <- paste(wd,"/datasets_inputs",sep="")
wd_Figures <- paste(wd,"/figures",sep="")
wd_R_scripts <- paste(wd,"/R_scripts",sep="")
setwd(wd)
source(paste(wd_R_scripts,"functions_coralModel.R",sep="/"))
# creation of a data frame with normalized data
data <- data.frame(
trait_1 = sample(0:10,1)/10,
trait_2 = sample(0:10,1)/10,
trait_3 = sample(0:10,1)/10,
trait_4 = sample(0:10,1)/10,
trait_5 = sample(0:10,1)/10,
trait_6 = sample(0:10,1)/10
)
# creation of a data frame with the min and max values for each variable/trait
MaxMin <- data.frame(
trait_1 = c(0,1),
trait_2 = c(0,1),
trait_3 = c(0,1),
trait_4 = c(0,1),
trait_5 = c(0,1),
trait_6 = c(0,1)
)
# combine the 2 datastes, the MaxMin 1st
dataForSpider <- rbind(MaxMin,data)
library("fmsb")
?radarchart
# radar/spider diagram:
radarchart(dataForSpider,
vlabels = c(gsub("_"," ",colnames(data))), # names/label to display on each axe
axistype = 0,  # show percentages
cglcol = "black",cglwd = 3, cglty = 2,  # color, thikness and type of net-lines
pfcol = "dodgerblue2", pcol = "dodgerblue4", pty = 0, # color polygon, color contour, symbole at nodes
vlcex = 2, # size labels axes,
)
