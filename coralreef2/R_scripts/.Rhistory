# determine the color of the fish FG and urchin
colorsSpecies <- c(c("darkcyan","darkgoldenrod","chocolate3"),c("darkcyan","darkgoldenrod","chocolate3"))
names(colorsSpecies) <- c("model1","model2","model3","model4","model5","model6")
sitesMartinique <- levels(as.factor(fish_family_sum$Site))
i <- 1
j <- 1
k <- 1
l <- 1
print.pdf <- F
printLegend <- F
graphics.off()
layout(matrix(seq(1:4),nrow=2,ncol=2,byrow = T), widths=c(1,1),heights=c(1,1))
par(mar=c(5.5,4,2,7))
for(i in 1:length(sitesMartinique)){
if(print.pdf){
setwd(wd_Figures)
graphics.off()
# pdf(file = paste("All_Categories_", sitesMartinique[i],".pdf",sep=""),height = 6, width = 10)
par(mar=c(5.5,9.5,2,3.5))
}
### subset by sites
fish_family_sum_sub <- subset(fish_family_sum,fish_family_sum$Site == sitesMartinique[i])
maxY <- max(c(fish_family_sum_sub$surfaceGrazed.model1,fish_family_sum_sub$surfaceGrazed.model2,fish_family_sum_sub$surfaceGrazed.model3),fish_family_sum_sub$surfaceGrazed.model4,fish_family_sum_sub$surfaceGrazed.model5,fish_family_sum_sub$surfaceGrazed.model6)
plot(1,1,col="white",las=0,xlab="",ylab="",ylim=c(0,maxY),xlim=c(0,maxX),cex=0.1,pch=1,lwd=1.5,main=sitesMartinique[i],yaxt="s",xaxt="n",las = 1)
abline(100,0,lty=2)
tic_at <- tics_xlabel$numberDays
tic_labels <- tics_xlabel$dateToDisplay
axis(side=1,at=tic_at,labels=F,las=1.5)
text(x=tic_at, y=rep(-maxY/10,length(tic_labels)),labels=tic_labels, srt=45, adj=1, xpd=T)
mtext(expression("Surface grazed (%)"),side=2,line=2.5,cex=0.9)
mtext("Time",side=1,line=4,cex=1.2)
lty <- 3
## plot model1
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model1,lwd =3,lty=lty,col= colorsSpecies[1])
## plot model2
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model2,lwd =3,lty=lty,col= colorsSpecies[2])
## plot model3
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model3,lwd =3,lty=lty,col= colorsSpecies[3])
## plot model4
lty <- 1
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model4,lwd =3,lty=lty,col= colorsSpecies[4])
## plot model5
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model5,lwd =3,lty=lty,col= colorsSpecies[5])
## plot model6
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model6,lwd =3,lty=lty,col= colorsSpecies[6])
### legend
legend("topright",col=colorsSpecies,c("model1","model2","model3","model4","model5","model6"),cex=1, bty = "n",lty=rev(c(1,1,1,3,3,3)),lwd=3)
if(print.pdf){
dev.off()
}
}
### Comparison different models for fish ----
## create DF with biomasse scaridae, acanthuridae and Pomecentridae side by side
fish_family_sum <- read.csv(paste(wd_Datasets,"Martinique_fish_herbivore_2001_2009_allsp_Family_wide.csv",sep="/"),header = T, stringsAsFactors = F)
### model 1: consider total biomass of fish (the 3 families groups), and use grazing.Fish.fun()
fish_family_sum$surfaceGrazed.model1 <- grazing.Fish.fun(fish_family_sum$biomass.total.g.m2)
### model 2: only consider Scaridae and Acanthuridae families and use grazing.Fish.fun()
fish_family_sum$surfaceGrazed.model2 <- grazing.Fish.fun(fish_family_sum$biomass.Acanthuridae.Scaridae.g.m2)
### model 3: only consider Scaridae and Acanthuridae families and use grazing.Scaridae.fun() and grazing.Acanthuridae.fun()
fish_family_sum$surfaceGrazed.model3 <- grazing.Scaridae.fun(fish_family_sum$biomass.Scaridae.g.m2) + grazing.Acanthuridae.fun(fish_family_sum$biomass.Acanthuridae.g.m2)
### model 4: consider total biomass of fish (the 3 families groups), and use grazing.Fish.logist.fun()
fish_family_sum$surfaceGrazed.model4 <- grazing.Fish.asympto.fun(fish_family_sum$biomass.total.g.m2)
### model 5: only consider Scaridae and Acanthuridae families and use grazing.Fish.asympto.fun()
fish_family_sum$surfaceGrazed.model5 <- grazing.Fish.asympto.fun(fish_family_sum$biomass.Acanthuridae.Scaridae.g.m2)
### model 3: only consider Scaridae and Acanthuridae families and use grazing.Scaridae.asympto.fun() and grazing.Acanthuridae.logit.fun()
fish_family_sum$surfaceGrazed.model6 <- grazing.Scaridae.asympto.fun(fish_family_sum$biomass.Scaridae.g.m2) + grazing.Acanthuridae.asympto.fun(fish_family_sum$biomass.Acanthuridae.g.m2)
### FIGURE : compare the 6 models for each site -----
maxY <- max(c(fish_family_sum$surfaceGrazed.model1,fish_family_sum$surfaceGrazed.model2,fish_family_sum$surfaceGrazed.model3),fish_family_sum$surfaceGrazed.model4,fish_family_sum$surfaceGrazed.model5,fish_family_sum$surfaceGrazed.model6)
maxX <- max(coral$numberDays)  # put coral because it goes up to 2013 whereas herbivores unly go up to 2009
tics_xlabel <- dateLabelingFun(fish_family_sum$numberDays,fish_family_sum$dateToDisplay) # get the month of sampling with only one corresponding number of days (the smaller ones) to reduce duplicates in month to display
tics_xlabel <- removeCloseObservatios.fun(DF=tics_xlabel,150) # remove the date to display that are too close in time (< 20 days)
# determine the color of the fish FG and urchin
colorsSpecies <- c(c("darkcyan","darkgoldenrod","chocolate3"),c("darkcyan","darkgoldenrod","chocolate3"))
names(colorsSpecies) <- c("model1","model2","model3","model4","model5","model6")
sitesMartinique <- levels(as.factor(fish_family_sum$Site))
i <- 1
j <- 1
k <- 1
l <- 1
print.pdf <- F
printLegend <- F
graphics.off()
layout(matrix(seq(1:4),nrow=2,ncol=2,byrow = T), widths=c(1,1),heights=c(1,1))
par(mar=c(5.5,4,2,7))
for(i in 1:length(sitesMartinique)){
if(print.pdf){
setwd(wd_Figures)
graphics.off()
# pdf(file = paste("All_Categories_", sitesMartinique[i],".pdf",sep=""),height = 6, width = 10)
par(mar=c(5.5,9.5,2,3.5))
}
### subset by sites
fish_family_sum_sub <- subset(fish_family_sum,fish_family_sum$Site == sitesMartinique[i])
maxY <- max(c(fish_family_sum_sub$surfaceGrazed.model1,fish_family_sum_sub$surfaceGrazed.model2,fish_family_sum_sub$surfaceGrazed.model3),fish_family_sum_sub$surfaceGrazed.model4,fish_family_sum_sub$surfaceGrazed.model5,fish_family_sum_sub$surfaceGrazed.model6)
plot(1,1,col="white",las=0,xlab="",ylab="",ylim=c(0,maxY),xlim=c(0,maxX),cex=0.1,pch=1,lwd=1.5,main=sitesMartinique[i],yaxt="s",xaxt="n",las = 1)
abline(100,0,lty=2)
tic_at <- tics_xlabel$numberDays
tic_labels <- tics_xlabel$dateToDisplay
axis(side=1,at=tic_at,labels=F,las=1.5)
text(x=tic_at, y=rep(-maxY/10,length(tic_labels)),labels=tic_labels, srt=45, adj=1, xpd=T)
mtext(expression("Surface grazed (%)"),side=2,line=2.5,cex=0.9)
mtext("Time",side=1,line=4,cex=1.2)
lty <- 3
## plot model1
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model1,lwd =3,lty=lty,col= colorsSpecies[1])
## plot model2
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model2,lwd =3,lty=lty,col= colorsSpecies[2])
## plot model3
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model3,lwd =3,lty=lty,col= colorsSpecies[3])
## plot model4
lty <- 1
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model4,lwd =3,lty=lty,col= colorsSpecies[4])
## plot model5
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model5,lwd =3,lty=lty,col= colorsSpecies[5])
## plot model6
lines(x=fish_family_sum_sub$numberDays,y=fish_family_sum_sub$surfaceGrazed.model6,lwd =3,lty=lty,col= colorsSpecies[6])
### legend
legend("topright",col=colorsSpecies,c("model1","model2","model3","model4","model5","model6"),cex=1, bty = "n",lty=rev(c(1,1,1,3,3,3)),lwd=3)
if(print.pdf){
dev.off()
}
}
######## FIGURES TO PRINT: empirical model definition  *********************************----
##### GRAZING FOR FISH (Williams and Polunin 2001) and GRAZING FOR URCHIN (Sammarco 1980) plus model -----
setwd(paste(wd_Figures,"grazing",sep="/"))
graphics.off()
xmax <- 50
# pdf(file = "empirical_data_grazing_model.pdf",height = 3.5, width = 6.5)
layout(matrix(seq(1:2),nrow=1,ncol=2,byrow = T), widths=c(1),heights=c(1))
par(mar=c(4,4,0.5,0.5))
### regression scaridae and acanthuridae grouped - Fig 3 a in  (Williams and Polunin 2001) -------
WillandPol <- data.frame(
percent_cropped_sub = c(19.7,22.8,20.4,17.4,36.9,35.3,36.4,37.8,39.4,47.6,48.6,51.2,53.4,51.0,54.1,57.9,62.1,65.2,45.7), # cropped = turf or CCA or bare substratum
biomass_gm2 = c(2.7,3.4,4.6,5.1,8.6,9.6,9.6,9.8,10.3,8.1,7.6,8.0,10.8,11.9,13.0,10.8,9.7,15.4,17.1)
)
yvar <- WillandPol$percent_cropped_sub
xvar <- WillandPol$biomass_gm2
lmGrazing.fish <- lm(yvar~xvar)
offsetX <- 0
min <- min(xvar)-offsetX
max <- max(xvar)+offsetX
extrems <- data.frame(xvar=c(min,max))
### least-sqaures regression
lmGrazing.fish <- lm(yvar~xvar)
summary(lmGrazing.fish)
# Coefficients:
#                  Estimate Std. Error t value Pr(>|t|)
#   (Intercept)  15.5413     6.3376   2.452 0.025297 *
#   xvar          2.8825     0.6369   4.526 0.000299 ***
# Residual standard error: 10.05 on 17 degrees of freedom
# Multiple R-squared:  0.5465,	Adjusted R-squared:  0.5198
# F-statistic: 20.48 on 1 and 17 DF,  p-value: 0.0002987
extrems$predicted_values <-  predict(lmGrazing.fish,newdata = extrems)
plot(yvar~xvar,col="darkgrey",las=1,xlab="",ylab="",cex=1.5,pch=1,lwd=1.5,main="",xlim=c(0,xmax),ylim=c(0,100)) # yaxt=Yaxt,xaxt=Xaxt
mtext("Surface grazed (%)",side=2,line=2.5,cex=1)
mtext(expression("Fish biomass (g.m"^-2*")"),side=1,line=2.5,cex=1)
segments(x0=extrems[1,1], y0=extrems[1,2],
x1=extrems[2,1], y1=extrems[2,2],
col = "black", lty = 1, lwd = 4)
## condidence bands:
maxValues <- data.frame(xvar=seq(from=min,to=max,length=10))
confi.lim <- as.data.frame(predict(lmGrazing.fish,maxValues,level=0.95,interval="confidence"))
lines(cbind(maxValues,confi.lim$lwr),col="black",lty="dashed",lwd=2)
lines(cbind(maxValues,confi.lim$upr),col="black",lty="dashed",lwd=2)
n <- length(WillandPol$percent_cropped_sub)
R2 <- round(0.5465,2)
P = "P < 0.001"
legend("bottomright",c(P,eval(bquote(expression("R"^2*" = " ~ .(R2)))),paste("n = ",n)),bty = "n")
legend("topright",LETTERS[1],bty = "n",cex = 1.2)
legend("topleft","Fish",bty = "n")
### asymptotic functions -----
biomass <- seq(0,100,1)
surfaceGrazed <- asymptote.fun(x=biomass,a=90,b=0,c=1,d=135)      # a = 90 because the fish community cannot graze 100% of reef, even if population is high --> exceed capacity (Williams et al., 2001, Paddack et al., 2006)
lines(x=biomass,y=surfaceGrazed,col="firebrick",lwd=3)
surfaceGrazed <- asymptote.fun(x=biomass,a=70,b=0,c=1,d=90)      # a = 65 because the fish community cannot graze 100% of reef, even if population is high --> exceed capacity (Williams et al., 2001, Paddack et al., 2006)
lines(x=biomass,y=surfaceGrazed,col="firebrick",lwd=3,lty=2)
wd <- "~/Dropbox/PhD Bruno/Modeling/empirical datasets"
# wd <- "C:/Users/Bruno/Dropbox/PhD Bruno/Modeling/empirical datasets"
wd_Datasets_original <- paste(wd,"/original_datasets",sep="")
wd_Datasets <- paste(wd,"/datasets",sep="")
wd_Figures <- paste(wd,"/figures",sep="")
wd_R_scripts <- paste(wd,"/Rscripts",sep="")
wd_datasets_forModel <- paste(wd,"/datasets_for_model",sep="")
source(paste(wd_R_scripts,"functions_EmpiricalDatasets.R",sep="/"))
#
### Import datasets ------
## sites_Martinique_DHW.csv
sites_DF <- read.csv(paste(wd_Datasets,"Martinique_Sites.csv",sep="/"),header=T,stringsAsFactors = F)
## Martinique_fish_herbivore_2001_2009.csv
fish <- read.csv(paste(wd_Datasets,"Martinique_fish_herbivore_2001_2009_allsp_FG.csv",sep="/"),header = T, stringsAsFactors = F)
fish_family <- read.csv(paste(wd_Datasets,"Martinique_fish_herbivore_2001_2009_allsp_Family.csv",sep="/"),header = T, stringsAsFactors = F)
fish_family_sum <- read.csv(paste(wd_Datasets,"Martinique_fish_herbivore_2001_2009_allsp_Family_wide.csv",sep="/"),header = T, stringsAsFactors = F)
## Martinique_urchin_2001_2009.csv
urchin <- read.csv(paste(wd_Datasets,"Martinique_urchin_2001_2009_Sum.csv",sep="/"),header = T, stringsAsFactors = F)
## Martinique_fish_urchin_2001_2009_allsp_Family_wide.csv
fish.urchin.wide <- read.csv(paste(wd_Datasets,"Martinique_fish_urchin_2001_2009_allsp_Family_wide.csv",sep="/"),header = T, stringsAsFactors = F)
## temporal_base_line.csv
base_line <- read.csv(paste(wd_Datasets,"temporal_base_line.csv",sep="/"),header = T, stringsAsFactors = T)
## coral just for the maximum number of days
coral <- read.csv(paste(wd_Datasets,"Martinique_coral_2001_2013_allsp.csv",sep="/"),header = T, stringsAsFactors = F)
#
######## FIGURES TO PRINT: empirical model definition  *********************************----
##### GRAZING FOR FISH (Williams and Polunin 2001) and GRAZING FOR URCHIN (Sammarco 1980) plus model -----
setwd(paste(wd_Figures,"grazing",sep="/"))
graphics.off()
xmax <- 50
# pdf(file = "empirical_data_grazing_model.pdf",height = 3.5, width = 6.5)
layout(matrix(seq(1:2),nrow=1,ncol=2,byrow = T), widths=c(1),heights=c(1))
par(mar=c(4,4,0.5,0.5))
### regression scaridae and acanthuridae grouped - Fig 3 a in  (Williams and Polunin 2001) -------
WillandPol <- data.frame(
percent_cropped_sub = c(19.7,22.8,20.4,17.4,36.9,35.3,36.4,37.8,39.4,47.6,48.6,51.2,53.4,51.0,54.1,57.9,62.1,65.2,45.7), # cropped = turf or CCA or bare substratum
biomass_gm2 = c(2.7,3.4,4.6,5.1,8.6,9.6,9.6,9.8,10.3,8.1,7.6,8.0,10.8,11.9,13.0,10.8,9.7,15.4,17.1)
)
yvar <- WillandPol$percent_cropped_sub
xvar <- WillandPol$biomass_gm2
lmGrazing.fish <- lm(yvar~xvar)
offsetX <- 0
min <- min(xvar)-offsetX
max <- max(xvar)+offsetX
extrems <- data.frame(xvar=c(min,max))
### least-sqaures regression
lmGrazing.fish <- lm(yvar~xvar)
summary(lmGrazing.fish)
# Coefficients:
#                  Estimate Std. Error t value Pr(>|t|)
#   (Intercept)  15.5413     6.3376   2.452 0.025297 *
#   xvar          2.8825     0.6369   4.526 0.000299 ***
# Residual standard error: 10.05 on 17 degrees of freedom
# Multiple R-squared:  0.5465,	Adjusted R-squared:  0.5198
# F-statistic: 20.48 on 1 and 17 DF,  p-value: 0.0002987
extrems$predicted_values <-  predict(lmGrazing.fish,newdata = extrems)
plot(yvar~xvar,col="darkgrey",las=1,xlab="",ylab="",cex=1.5,pch=1,lwd=1.5,main="",xlim=c(0,xmax),ylim=c(0,100)) # yaxt=Yaxt,xaxt=Xaxt
mtext("Surface grazed (%)",side=2,line=2.5,cex=1)
mtext(expression("Fish biomass (g.m"^-2*")"),side=1,line=2.5,cex=1)
segments(x0=extrems[1,1], y0=extrems[1,2],
x1=extrems[2,1], y1=extrems[2,2],
col = "black", lty = 1, lwd = 4)
## condidence bands:
maxValues <- data.frame(xvar=seq(from=min,to=max,length=10))
confi.lim <- as.data.frame(predict(lmGrazing.fish,maxValues,level=0.95,interval="confidence"))
lines(cbind(maxValues,confi.lim$lwr),col="black",lty="dashed",lwd=2)
lines(cbind(maxValues,confi.lim$upr),col="black",lty="dashed",lwd=2)
n <- length(WillandPol$percent_cropped_sub)
R2 <- round(0.5465,2)
P = "P < 0.001"
legend("bottomright",c(P,eval(bquote(expression("R"^2*" = " ~ .(R2)))),paste("n = ",n)),bty = "n")
legend("topright",LETTERS[1],bty = "n",cex = 1.2)
legend("topleft","Fish",bty = "n")
### asymptotic functions logistic regressions -----
biomass <- seq(0,100,1)
WillandPol
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol
cbind(40:50,rep(90,10))
rbind(WillandPol_logit_90,cbind(40:50,rep(90,11)))
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:10,]
WillandPol_logit_90$percent_cropped_sub <- 40:50
WillandPol_logit_90$percent_cropped_sub <- 41:50
WillandPol_logit_90$biomass_gm2 <- 41:50
WillandPol_logit_90$percent_cropped_sub <- rep(90,10)
WillandPol_logit_90
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
WillandPol_logit_90
WillandPol_logit_70 <- WillandPol[1:10,]
WillandPol_logit_70$biomass_gm2 <- 41:50
WillandPol_logit_70$percent_cropped_sub <- rep(70,10)
WillandPol_logit_70 <- rbind(WillandPol,WillandPol_logit_70)
surfaceGrazed <- asymptote.fun(x=biomass,a=90,b=0,c=1,d=135)      # a = 90 because the fish community cannot graze 100% of reef, even if population is high --> exceed capacity (Williams et al., 2001, Paddack et al., 2006)
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5)
}
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
points(x=WillandPol_logit_90$biomass_gm2[i],y=WillandPol_logit_90$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
## determine the logistic models
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub~WillandPol_logit_90$biomass_gm2,family=binomial(link = "logit"))
## determine the logistic models
WillandPol_logit_90$biomass_gm2_01 <- logitTrans(WillandPol_logit_90$biomass_gm2) # transform data from [0,100] to ]0,1[
setwd("~/Documents/My_Research/Modeling/coralreef2/R_scripts")
source(paste("~/Documents/My_Research/Modeling/coralreef2/R_scripts","functions_coralModel.R",sep="/"))
## determine the logistic models
WillandPol_logit_90$biomass_gm2_01 <- logitTrans(WillandPol_logit_90$biomass_gm2) # transform data from [0,100] to ]0,1[
WillandPol_logit_90
## determine the logistic models
WillandPol_logit_90$biomass_gm2_01 <- WillandPol_logit_90$biomass_gm2 / 100 # transform data from [0,100] to ]0,1[
WillandPol_logit_90
## determine the logistic models
WillandPol_logit_90$biomass_gm2_01 <- WillandPol_logit_90$biomass_gm2 / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub~WillandPol_logit_90$biomass_gm2,family=binomial(link = "logit"))
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub~WillandPol_logit_90$biomass_gm2_01,family=binomial(link = "logit"))
WillandPol_logit_90$biomass_gm2_01
WillandPol_logit_90 <- WillandPol[1:10,]
WillandPol_logit_90$biomass_gm2 <- 41:50
WillandPol_logit_90$percent_cropped_sub <- rep(90,10)
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
WillandPol_logit_70 <- WillandPol[1:10,]
WillandPol_logit_70$biomass_gm2 <- 41:50
WillandPol_logit_70$percent_cropped_sub <- rep(70,10)
WillandPol_logit_70 <- rbind(WillandPol,WillandPol_logit_70)
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
points(x=WillandPol_logit_90$biomass_gm2[i],y=WillandPol_logit_90$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
## determine the logistic models
WillandPol_logit_90$percent_cropped_sub_01 <- WillandPol_logit_90$percent_cropped_sub / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub_01 ~ WillandPol_logit_90$percent_cropped_sub,family=binomial(link = "logit"))
summary(logistic_90)
biomass
surfaceGrazed_90 <- predict(logistic_90)
surfaceGrazed_90 <- predict(logistic_90) *100
lines(x=biomass,y=surfaceGrazed_90,col="firebrick",lwd=3)
lines(x=WillandPol_logit_90$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
surfaceGrazed_90
logit.invers <- function(var = c()){
y <- exp(var)/(exp(var)+1)
y
}
surfaceGrazed_90 <- logit.invers(predict(logistic_90)) * 100
lines(x=WillandPol_logit_90$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
plot(yvar~xvar,col="darkgrey",las=1,xlab="",ylab="",cex=1.5,pch=1,lwd=1.5,main="",xlim=c(0,xmax),ylim=c(0,100)) # yaxt=Yaxt,xaxt=Xaxt
mtext("Surface grazed (%)",side=2,line=2.5,cex=1)
mtext(expression("Fish biomass (g.m"^-2*")"),side=1,line=2.5,cex=1)
segments(x0=extrems[1,1], y0=extrems[1,2],
x1=extrems[2,1], y1=extrems[2,2],
col = "black", lty = 1, lwd = 4)
## condidence bands:
maxValues <- data.frame(xvar=seq(from=min,to=max,length=10))
confi.lim <- as.data.frame(predict(lmGrazing.fish,maxValues,level=0.95,interval="confidence"))
lines(cbind(maxValues,confi.lim$lwr),col="black",lty="dashed",lwd=2)
lines(cbind(maxValues,confi.lim$upr),col="black",lty="dashed",lwd=2)
n <- length(WillandPol$percent_cropped_sub)
R2 <- round(0.5465,2)
P = "P < 0.001"
legend("bottomright",c(P,eval(bquote(expression("R"^2*" = " ~ .(R2)))),paste("n = ",n)),bty = "n")
legend("topright",LETTERS[1],bty = "n",cex = 1.2)
legend("topleft","Fish",bty = "n")
### asymptotic functions logistic regressions -----
biomass <- seq(0,100,1)
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:10,]
WillandPol_logit_90$biomass_gm2 <- 41:50
WillandPol_logit_90$percent_cropped_sub <- rep(90,10)
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
WillandPol_logit_70 <- WillandPol[1:10,]
WillandPol_logit_70$biomass_gm2 <- 41:50
WillandPol_logit_70$percent_cropped_sub <- rep(70,10)
WillandPol_logit_70 <- rbind(WillandPol,WillandPol_logit_70)
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
points(x=WillandPol_logit_90$biomass_gm2[i],y=WillandPol_logit_90$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
newData <- seq(0,100,1)
newData <- data.frame(biomass_gm2=seq(0,100,1))
surfaceGrazed_90 <- logit.invers(predict(logistic_90),newdata = newData) * 100
surfaceGrazed_90 <- logit.invers(predict(logistic_90,newdata = newData)) * 100
?predict
surfaceGrazed_90 <- predict.glm(logistic_90,newdata = newData,type = "response") * 100
newData
## determine the logistic models
WillandPol_logit_90$percent_cropped_sub_01 <- WillandPol_logit_90$percent_cropped_sub / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub_01 ~ WillandPol_logit_90$biomass_gm2,family=binomial(link = "logit"))
summary(logistic_90)
newData <- data.frame(biomass_gm2=seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData,type = "response") * 100
newData
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
surfaceGrazed_90
newData <- data.frame(biomass_gm2 = seq(0,100,1))
newData
logistic_90 <- glm(WillandPol_logit_90$percent_cropped_sub_01 ~ WillandPol_logit_90$biomass_gm2 , family=binomial(link = "logit"))
summary(logistic_90)
newData <- data.frame(biomass_gm2 = seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
surfaceGrazed_90
logistic_90 <- glm(percent_cropped_sub_01 ~ biomass_gm2 , family=binomial(link = "logit"),data = WillandPol_logit_90)
summary(logistic_90)
logit.invers <- function(var = c()){
y <- exp(var)/(exp(var)+1)
y
}
newData <- data.frame(biomass_gm2 = seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
lines(x=WillandPol_logit_90$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
lines(x=newData$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:10,]
WillandPol_logit_90$biomass_gm2 <- 41:50
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:10,]
WillandPol_logit_90$biomass_gm2 <- 41:50
WillandPol_logit_90$percent_cropped_sub <- rep(90,10)
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
WillandPol_logit_90
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:30,]
WillandPol_logit_90$biomass_gm2 <- c(rep(0,10),41:60)
WillandPol_logit_90$percent_cropped_sub <- c(rep(0,10),rep(90,20))
WillandPol_logit_90
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
points(x=WillandPol_logit_90$biomass_gm2[i],y=WillandPol_logit_90$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
## determine the logistic models
WillandPol_logit_90$percent_cropped_sub_01 <- WillandPol_logit_90$percent_cropped_sub / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(percent_cropped_sub_01 ~ biomass_gm2 , family=binomial(link = "logit"),data = WillandPol_logit_90)
summary(logistic_90)
newData <- data.frame(biomass_gm2 = seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
lines(x=newData$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
WillandPol
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:30,]
WillandPol_logit_90
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:50,]
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:60,]
WillandPol_logit_90$biomass_gm2 <- c(rep(0,30),41:70)
WillandPol_logit_90$percent_cropped_sub <- c(rep(0,30),rep(90,30))
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
WillandPol_logit_90
## ploints the new points
for(i in 20:29){
points(x=WillandPol_logit_70$biomass_gm2[i],y=WillandPol_logit_70$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
points(x=WillandPol_logit_90$biomass_gm2[i],y=WillandPol_logit_90$percent_cropped_sub[i],cex=1.5,pch=1,lwd=1.5,col="firebrick")
}
## determine the logistic models
WillandPol_logit_90$percent_cropped_sub_01 <- WillandPol_logit_90$percent_cropped_sub / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(percent_cropped_sub_01 ~ biomass_gm2 , family=binomial(link = "logit"),data = WillandPol_logit_90)
summary(logistic_90)
newData <- data.frame(biomass_gm2 = seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
lines(x=newData$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
## add points for higher values of fish biomass
WillandPol_logit_90 <- WillandPol[1:60,]
WillandPol_logit_90$biomass_gm2 <- c(rep(0,30),seq(41,55,1),seq(41,55,1))
WillandPol_logit_90$percent_cropped_sub <- c(rep(0,30),rep(90,30))
WillandPol_logit_90 <- rbind(WillandPol,WillandPol_logit_90)
## determine the logistic models
WillandPol_logit_90$percent_cropped_sub_01 <- WillandPol_logit_90$percent_cropped_sub / 100 # transform data from [0,100] to ]0,1[
logistic_90 <- glm(percent_cropped_sub_01 ~ biomass_gm2 , family=binomial(link = "logit"),data = WillandPol_logit_90)
summary(logistic_90)
logit.invers <- function(var = c()){
y <- exp(var)/(exp(var)+1)
y
}
newData <- data.frame(biomass_gm2 = seq(0,100,1))
surfaceGrazed_90 <- predict.glm(logistic_90 , newdata = newData, type = "response") * 100
lines(x=newData$biomass_gm2,y=surfaceGrazed_90,col="firebrick",lwd=3)
# workingDirectory <- "~/Documents/My_Research/Modeling/coralreef2"
communtyNb <- 3
createOutcomeCompetition <- function(workingDirectory,communtyNb){
wd <- workingDirectory
wd_Datasets_original <- paste(wd,"/datasets_original",sep="") # orginal dataset inported where full coral_pair_competition_probability.csv from ()
# wd_Datasets_R <- paste(wd,"/datasets_R",sep="")               # datasets and results obtained from work on original datasets in R, but not used for the Repast model
# wd_Datasets_outputs <- paste(wd,"/datasets_outputs",sep="")
wd_Datasets_inputs <- paste(wd,"/data",sep="")                # folder where to export the subset of coral_pair_competition_probability.csv
# wd_Figures <- paste(wd,"/figures",sep="")
# wd_R_scripts <- paste(wd,"/R_scripts",sep="")
# wd_outputs_simulation <- paste(wd,"/outputs_simulations",sep="")
i <- communtyNb
nameCoralSpeciesCSVPresent <- paste(wd_Datasets_inputs,paste("Species_present_in_simulation_community_",i,".csv",sep=""),sep="/")
coralSpeciesCSVPresent <- file.exists(nameCoralSpeciesCSVPresent)
# check if coral_pair_competition_probability_simulation_community_?.csv is already present
nameCoral_pair_competition_proba <- paste(wd_Datasets_inputs,paste("coral_pair_competition_probability_simulation_community_",i,".csv",sep=""),sep="/")
nameCoral_pair_competition_probaPresent <-  file.exists(nameCoral_pair_competition_proba)
if(coralSpeciesCSVPresent && !nameCoral_pair_competition_probaPresent){
### Import the species present in the simulation
speciesPresent <- read.csv(nameCoralSpeciesCSVPresent,header=T,stringsAsFactors = F)
speciesPresent$species_names <- gsub("_"," ",speciesPresent$species_names) # replace "_" by " "
### Import output species-pair interction probability of Precoda_et_al_2017 (with updated names)
speciesPairInteraction_original <- read.csv(paste(wd_Datasets_original,"coral_pair_competition_probability.csv",sep="/"),header=T,stringsAsFactors = F)
length(speciesPairInteraction_original$species1) # 274911
length(levels(as.factor(speciesPairInteraction_original$species1))) # 741
### number species in common in the 2 lists:
speciesPresentInBothLists <- levels(as.factor(speciesPairInteraction_original$species1[speciesPairInteraction_original$species1 %in% speciesPresent$species_names]))
length(speciesPresentInBothLists) # 10
### Make a subste of speciesPairInteraction_original with only the species present
speciesPairInteraction <- speciesPairInteraction_original[speciesPairInteraction_original$species1 %in% speciesPresent$species_names,]
length(speciesPairInteraction$species1) # 2220
speciesPairInteraction <- speciesPairInteraction[speciesPairInteraction$species2 %in% speciesPresent$species_names,]
length(speciesPairInteraction$species1) # 55 = (10*9)/2+10
# remove species_a vs species_a raws
speciesPairInteraction <- speciesPairInteraction[speciesPairInteraction$species1 != speciesPairInteraction$species2,]
length(speciesPairInteraction$species1) # 45 = 55 - 10
### change " " to "_" in the names
speciesPairInteraction$species1 <- gsub(" ","_",speciesPairInteraction$species1)
speciesPairInteraction$species2 <- gsub(" ","_",speciesPairInteraction$species2)
### write csv, only the 1st 3 columns
write.csv(speciesPairInteraction[,c(1,2,5)],nameCoral_pair_competition_proba,row.names = F)
}
}
wd <- gsub("/R_scripts/coral_pair_competition_probability.R","",path)
wd <- "~/Documents/My_Research/Modeling/coralreef2"
i <- 2
i <- 3
createOutcomeCompetition(wd,i)
i <- 4
createOutcomeCompetition(wd,i)
